#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <map>
#include <set>
#include <utility>
#include <queue>
#include <functional>
#include <ctime>
using namespace std;

/*
自己的方法，首先创建一个大小为rowIndex + 1的vector，然后从后往前修改里面的数字，时间复杂度为O(n^2)，空间复杂度是O(n)
网上的方法，利用两个vector，一个vector记录上一层的结果，一个vector记录当成计算出来的结果，时间和空间复杂度应该是一样的，
	但实际中，会有vector的不断移动，这样不会带来额外的移动损耗吗，但为什么网上的方法得分比我的高？

使用c++中的clock()始终计时，是自己的方法的速度更加快！！
*/

class Solution 
{
public:
	vector<int> getRow(int rowIndex)
	{
		if (rowIndex == 0)
			return { 1 };
		vector<int> res{ 1,1 };
		if (rowIndex == 1)
			return res;
		res.resize(rowIndex + 1, 0);
		for (int i = 2; i <= rowIndex; ++i)
		{
			for (int j = i; j > 0; --j)
			{
				res[j] = res[j] + res[j - 1];
			}
		}
		return res;
	}

	vector<int> getRow_network(int rowIndex)
	{
		vector<int> res{ 1 };
		vector<int> col;
		for (int i = 1; i <= rowIndex; ++i)
		{
			col.push_back(1);
			for (int j = 1; j < i; ++j)
			{
				//当i=1时，说明第一行，不会执行这里的内容
				col.push_back(res[j - 1] + res[j]);
			}
			col.push_back(1);
			res = col;
			col.clear();
		}
		return res;
	}
};


int main() 
{
	Solution a;
	auto b = a.getRow_network(33);
	for (auto m : b)
	{
		cout << m << " ";
	}
	cout << endl;

	//auto start = clock();
	//for (int i = 0; i < 1000; ++i)
	//	auto b = a.getRow(33);
	//auto end = clock();

	//auto start1 = clock();
	//for (int i = 0; i < 1000; ++i)
	//	auto b = a.getRow_network(33);
	//auto end1 = clock();

	//cout << "my method " << end - start << endl;
	//cout << "network " << end1 - start1 << endl;


	system("pause");
	return 0;
}
